/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.patient;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.InputVerifier;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.person;
import model.personDirectory;
import model.stringVerifier;
import model.vitalSign;

/**
 *
 * @author ruchachotalia
 */
public class manageVitalsign extends javax.swing.JPanel {

    /**
     * Creates new form manageVitalsign
     */
    private personDirectory personDirectory;
    private JPanel userProcessContainer;
    
    public manageVitalsign(JPanel userProcessContainer, personDirectory personDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.personDirectory= personDirectory;
        InputVerifier stringVerifier = new stringVerifier();
        searchboxpatientTxt.setInputVerifier(stringVerifier);
        ArrayList<person> personList = personDirectory.getPersonHistory();
        populatePatientsTable(personList);
        populateVitalSignTable(null);
    }
    private void populatePatientsTable(ArrayList<person> personList) {
        DefaultTableModel model = (DefaultTableModel) patientdetailsTable.getModel();
        model.setRowCount(0);
        if(personList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No Persons found. Please add Persons",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (person Person : personList) {
            Object[] row = new Object[3];
            row[0] = Person;
            row[1]= Person.getAge();
            if(Person.getPatient()!=null)
            {
                row[2] = Person.getPatient().getPatientID();
            }
            else
            {
                row[2] = "Patient Not Created";
            }
            
            model.addRow(row);
        }
    }
    
    private void populateVitalSignTable(person Person) {
        
        DefaultTableModel model = (DefaultTableModel) tbVitalSigns.getModel();
        model.setRowCount(0);
        if (Person != null) {
            int patientAge = Person.getAge();
            ArrayList<vitalSign> vitalSignList = Person.getPatient().getVitalSignHistory().getHistory();
            
            if (vitalSignList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No vital signs found. Please"
                        + " add vital signs", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            for (vitalSign vitalSign : vitalSignList) {
                Object[] row = new Object[2];
                row[0] = vitalSign;
                row[1] = VitalSignStatus(patientAge, vitalSign);
                if(row[1].equals("Abnormal")){
                    Person.setHasVitalSigns(true);
                }
                else{
                    Person.setHasVitalSigns(false);
                }
                model.addRow(row);
            }
        }
    }
    
    private String VitalSignStatus(int patientAge, vitalSign vitalSign) {
        String vitalSignStatus = "Normal";
        
        int bloodPressure = vitalSign.getBloodPressure();
        
        if (bloodPressure < 80 || bloodPressure > 120){
            
            vitalSignStatus = "Abnormal";
        }

        return vitalSignStatus;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientdetailsTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        addvitalsignBtn = new javax.swing.JButton();
        displayvitalsignBtn = new javax.swing.JButton();
        searchboxpatientTxt = new javax.swing.JTextField();
        searchpatientdetailsBtn = new javax.swing.JButton();
        refreshpatientdetalisBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbVitalSigns = new javax.swing.JTable();
        viewvitalsignsBtn = new javax.swing.JButton();
        editvitalsignsBtn = new javax.swing.JButton();
        deletevitalsignsBtn = new javax.swing.JButton();
        refreshvitalsignBtn = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        patientdetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Age"
            }
        ));
        jScrollPane1.setViewportView(patientdetailsTable);

        backBtn.setText("<<Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        addvitalsignBtn.setText("Add Vital Sign");
        addvitalsignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addvitalsignBtnActionPerformed(evt);
            }
        });

        displayvitalsignBtn.setText("Display Vital Sign");
        displayvitalsignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayvitalsignBtnActionPerformed(evt);
            }
        });

        searchpatientdetailsBtn.setText("Search");
        searchpatientdetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchpatientdetailsBtnActionPerformed(evt);
            }
        });

        refreshpatientdetalisBtn.setText("Refresh");
        refreshpatientdetalisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshpatientdetalisBtnActionPerformed(evt);
            }
        });

        tbVitalSigns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Timestamp", "Status"
            }
        ));
        jScrollPane3.setViewportView(tbVitalSigns);

        viewvitalsignsBtn.setText("View Vital Signs");
        viewvitalsignsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewvitalsignsBtnActionPerformed(evt);
            }
        });

        editvitalsignsBtn.setText("Edit Vital Signs");
        editvitalsignsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editvitalsignsBtnActionPerformed(evt);
            }
        });

        deletevitalsignsBtn.setText("Delete Vital Signs");
        deletevitalsignsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletevitalsignsBtnActionPerformed(evt);
            }
        });

        refreshvitalsignBtn.setText("Refresh");
        refreshvitalsignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshvitalsignBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(searchboxpatientTxt)
                    .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(133, 133, 133)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addvitalsignBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchpatientdetailsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(displayvitalsignBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshpatientdetalisBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(viewvitalsignsBtn)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(editvitalsignsBtn)
                .addGap(73, 73, 73)
                .addComponent(deletevitalsignsBtn)
                .addGap(48, 48, 48))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshvitalsignBtn)
                .addGap(277, 277, 277))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(addvitalsignBtn)
                    .addComponent(displayvitalsignBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchboxpatientTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchpatientdetailsBtn)
                    .addComponent(refreshpatientdetalisBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewvitalsignsBtn)
                    .addComponent(editvitalsignsBtn)
                    .addComponent(deletevitalsignsBtn))
                .addGap(18, 18, 18)
                .addComponent(refreshvitalsignBtn)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshpatientdetalisBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshpatientdetalisBtnActionPerformed
        // TODO add your handling code here:
        searchboxpatientTxt.setText("");
        populatePatientsTable(personDirectory.getPersonHistory());
        
    }//GEN-LAST:event_refreshpatientdetalisBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void addvitalsignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addvitalsignBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientdetailsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        person Person = (person) patientdetailsTable.getValueAt(selectedRow, 0);
        Patient patient= Person.getPatient();
        if(patient!=null)
        {
            createVitalsign cvsJPanel = new createVitalsign(userProcessContainer, patient);
            Person.setHasVitalSigns(true);
            userProcessContainer.add("cvsJPanel", cvsJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create"
                    + " Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addvitalsignBtnActionPerformed

    private void displayvitalsignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayvitalsignBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientdetailsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        person Person = (person) patientdetailsTable.getValueAt(selectedRow, 0);
        Patient patient= Person.getPatient();
        if(patient!=null)
        {
            populateVitalSignTable(Person);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create "
                    + "Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_displayvitalsignBtnActionPerformed

    private void searchpatientdetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchpatientdetailsBtnActionPerformed
        // TODO add your handling code here:
         String key = searchboxpatientTxt.getText().trim();
        if(key.length()==0)
        {
            JOptionPane.showMessageDialog(this, "Please enter key.","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        /*Storing searched patients in an array to display in table.*/
        ArrayList<person> searchPatients = personDirectory.searchPatient(key);
        populatePatientsTable(searchPatients);
    }//GEN-LAST:event_searchpatientdetailsBtnActionPerformed

    private void viewvitalsignsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewvitalsignsBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbVitalSigns.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        vitalSign vitalSign = (vitalSign) tbVitalSigns.getValueAt(selectedRow, 0);
        viewUpdateVitalsign vuvsJPanel = new viewUpdateVitalsign(userProcessContainer,
                vitalSign, Boolean.FALSE);
        userProcessContainer.add("vuvsJPanel", vuvsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewvitalsignsBtnActionPerformed

    private void editvitalsignsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editvitalsignsBtnActionPerformed
        // TODO add your handling code here:
         int selectedRow = tbVitalSigns.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        vitalSign vitalSign = (vitalSign) tbVitalSigns.getValueAt(selectedRow, 0);
        
        viewUpdateVitalsign vuvsJPanel = new viewUpdateVitalsign(userProcessContainer,
                vitalSign, Boolean.TRUE);
        userProcessContainer.add("vuvsJPanel", vuvsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_editvitalsignsBtnActionPerformed

    private void deletevitalsignsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletevitalsignsBtnActionPerformed
        // TODO add your handling code here:
         int selectedRow = tbVitalSigns.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.");
            return;
        }
        person Person = (person) tbVitalSigns.getValueAt(selectedRow, 0);
        Patient patient= Person.getPatient();
        if(patient==null)
        {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create"
                    + " Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        selectedRow = tbVitalSigns.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        vitalSign vitalSign = (vitalSign) tbVitalSigns.getValueAt(selectedRow, 0);
        
        int flag= JOptionPane.showConfirmDialog(this, "Are you sure want to remove?",
                "Warning", JOptionPane.YES_NO_OPTION);
        if(flag==0)
        {
            patient.getVitalSignHistory().deleteVitalSign(vitalSign);
            refreshVialSigns();
        }
        
    
    }//GEN-LAST:event_deletevitalsignsBtnActionPerformed

    private void refreshvitalsignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshvitalsignBtnActionPerformed
        // TODO add your handling code here:
        refreshVialSigns();
        
    }//GEN-LAST:event_refreshvitalsignBtnActionPerformed

    private void refreshVialSigns() {
        int selectedRow = tbVitalSigns.getSelectedRow();
        if (selectedRow < 0) {
            populateVitalSignTable(null);
        } else {
            person Person = (person) tbVitalSigns.getValueAt(selectedRow, 0);
            Patient patient= Person.getPatient();
            if(patient!=null)
            {
                populateVitalSignTable(Person);
            }
            else
            {
                populateVitalSignTable(null);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addvitalsignBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton deletevitalsignsBtn;
    private javax.swing.JButton displayvitalsignBtn;
    private javax.swing.JButton editvitalsignsBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable patientdetailsTable;
    private javax.swing.JButton refreshpatientdetalisBtn;
    private javax.swing.JButton refreshvitalsignBtn;
    private javax.swing.JTextField searchboxpatientTxt;
    private javax.swing.JButton searchpatientdetailsBtn;
    private javax.swing.JTable tbVitalSigns;
    private javax.swing.JButton viewvitalsignsBtn;
    // End of variables declaration//GEN-END:variables
}
